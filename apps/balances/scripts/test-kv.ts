#!/usr/bin/env node
/**
 * Test KV Store operations
 */

import { config } from 'dotenv'
import { join } from 'path'
config({ path: join(process.cwd(), '.env.local') })

import { KVBalanceStore } from '@services/balances'

async function testKVStore() {
  console.log('üîç Testing KV Store...')
  
  try {
    console.log('üì¶ Creating KVBalanceStore instance...')
    const kvStore = new KVBalanceStore()
    console.log('‚úÖ KVBalanceStore created')

    // Test basic operations
    console.log('\nüìù Testing basic KV operations...')
    
    // Test set/get
    const testKey = `test-${Date.now()}`
    const testValue = { test: 'data', timestamp: Date.now() }
    
    console.log(`üì§ Setting key: ${testKey}`)
    await kvStore.set(testKey, JSON.stringify(testValue))
    console.log('‚úÖ Set successful')
    
    console.log(`üì• Getting key: ${testKey}`)
    const retrieved = await kvStore.get(testKey)
    console.log('‚úÖ Get successful:', retrieved)
    
    // Test delete
    console.log(`üóëÔ∏è  Deleting key: ${testKey}`)
    await kvStore.delete(testKey)
    console.log('‚úÖ Delete successful')

    // Test getting stats
    console.log('\nüìä Testing stats...')
    try {
      const stats = await kvStore.getStats()
      console.log('‚úÖ Stats retrieved:', stats)
    } catch (error) {
      console.warn('‚ö†Ô∏è  Stats failed:', error.message)
    }

    // Test getting all addresses
    console.log('\nüë• Testing getAllAddresses...')
    try {
      const addresses = await kvStore.getAllAddresses()
      console.log('‚úÖ Addresses retrieved:', addresses.length, 'addresses')
      if (addresses.length > 0) {
        console.log('   First few addresses:', addresses.slice(0, 3))
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è  getAllAddresses failed:', error.message)
    }

    console.log('\n‚úÖ KV Store test completed successfully!')

  } catch (error) {
    console.error('‚ùå KV Store test failed:', error)
    process.exit(1)
  }
}

testKVStore().catch(console.error)