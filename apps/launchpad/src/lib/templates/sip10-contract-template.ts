/**
 * SIP-10 Fungible Token Contract Template Generator
 */

/**
 * Options for SIP-10 token contract generation
 */
export interface SIP10TokenOptions {
    tokenName: string;
    tokenSymbol: string;
    decimals: number;
    initialSupply: number;
    hasMinting: boolean;
    hasBurning: boolean;
    contractName: string;
    deployerAddress: string;
}

/**
 * Generates a SIP-10 fungible token contract
 */
export function generateSIP10TokenContract({
    tokenName,
    tokenSymbol,
    decimals,
    initialSupply,
    hasMinting = false,
    hasBurning = false,
    contractName,
    deployerAddress
}: SIP10TokenOptions): string {
    // Calculate actual initial supply with decimals
    const actualSupply = initialSupply * Math.pow(10, decimals);

    // Generate a contract name if not provided
    const derivedContractName = contractName || tokenName.toLowerCase()
        .replace(/\s+/g, '-')
        .replace(/[^a-z0-9-]/g, '')
        .replace(/^(\d)/, 'token-$1');

    // Build the token URI with the deployer address if available
    const tokenUriBase = "https://charisma-metadata.vercel.app/api/v1/metadata/";
    const fullContractId = `${deployerAddress}.${derivedContractName}`
    const tokenUri = `${tokenUriBase}${fullContractId}`;

    const contract = `
;; ${tokenName} - SIP-010 Fungible Token
;; Generated by Charisma Launchpad

(impl-trait 'SP3FBR2AGK5H9QBDH3EEN6DF8EK8JY7RX8QJ5SVTE.sip-010-trait-ft-standard.sip-010-trait)

;; Error codes
(define-constant ERR-OWNER-ONLY (err u100))
(define-constant ERR-NOT-AUTHORIZED (err u403))

;; Constants
(define-constant DEPLOYER tx-sender)
(define-constant TOTAL-SUPPLY u${actualSupply})

;; Token definition
(define-fungible-token ${tokenSymbol.toUpperCase()} TOTAL-SUPPLY)
(define-data-var token-uri (optional (string-utf8 256)) none)
${hasMinting ? '(define-data-var is-minting-allowed bool true)' : ''}
${hasBurning ? '(define-data-var is-burning-allowed bool true)' : ''}

;; SIP-010 Standard Functions

(define-public (transfer (amount uint) (sender principal) (recipient principal) (memo (optional (buff 34))))
    (begin
        (asserts! (or (is-eq tx-sender sender) (is-eq contract-caller sender)) ERR-NOT-AUTHORIZED)
        (if (is-some memo)
            (print memo)
            none)
        (ft-transfer? ${tokenSymbol.toUpperCase()} amount sender recipient)
    )
)

(define-read-only (get-name) 
    (ok "${tokenName}")
)

(define-read-only (get-symbol) 
    (ok "${tokenSymbol.toUpperCase()}")
)

(define-read-only (get-decimals) 
    (ok u${decimals})
)

(define-read-only (get-balance (who principal))
    (ok (ft-get-balance ${tokenSymbol.toUpperCase()} who))
)

(define-read-only (get-total-supply)
    (ok (ft-get-supply ${tokenSymbol.toUpperCase()}))
)

(define-read-only (get-token-uri)
    (ok (var-get token-uri))
)

;; Additional Functions

${hasBurning ? `
(define-public (burn (amount uint))
    (begin
        (asserts! (var-get is-burning-allowed) (err u104))
        (ft-burn? ${tokenSymbol.toUpperCase()} amount tx-sender)
    )
)

(define-public (disable-burning)
    (begin
        (asserts! (is-eq tx-sender DEPLOYER) ERR-OWNER-ONLY)
        (ok (var-set is-burning-allowed false))
    )
)` : ''}

(define-public (set-token-uri (value (string-utf8 256)))
    (begin
        (asserts! (is-eq tx-sender DEPLOYER) ERR-OWNER-ONLY)
        (ok (var-set token-uri (some value)))
    )
)

;; Batch Transfer Function
(define-public (send-many (recipients (list 200 { to: principal, amount: uint, memo: (optional (buff 34)) })))
    (fold check-err (map send-token recipients) (ok true))
)

(define-private (check-err (result (response bool uint)) (prior (response bool uint)))
    (match prior ok-value result err-value (err err-value))
)

(define-private (send-token (recipient { to: principal, amount: uint, memo: (optional (buff 34)) }))
    (send-token-with-memo (get amount recipient) (get to recipient) (get memo recipient))
)

(define-private (send-token-with-memo (amount uint) (to principal) (memo (optional (buff 34))))
    (let ((transferOk (try! (transfer amount tx-sender to memo))))
        (ok transferOk)
    )
)

${hasMinting ? `
;; Minting Functions
(define-public (mint (amount uint) (recipient principal))
    (begin
        (asserts! (is-eq tx-sender DEPLOYER) ERR-OWNER-ONLY)
        (asserts! (var-get is-minting-allowed) (err u103))
        (ft-mint? ${tokenSymbol.toUpperCase()} amount recipient)
    )
)

(define-public (disable-minting)
    (begin
        (asserts! (is-eq tx-sender DEPLOYER) ERR-OWNER-ONLY)
        (ok (var-set is-minting-allowed false))
    )
)` : ''}

;; Initialize token URI with metadata endpoint
(var-set token-uri (some u"${tokenUri}"))

;; Initial mint to deployer
(ft-mint? ${tokenSymbol.toUpperCase()} TOTAL-SUPPLY DEPLOYER)
`;

    return contract;
} 