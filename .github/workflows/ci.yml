name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.get-packages.outputs.apps }}
      packages: ${{ steps.get-packages.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Get package lists
        id: get-packages
        run: |
          # Get apps list - use compact JSON output
          apps=$(find ./apps -maxdepth 2 -name "package.json" | grep -v node_modules | xargs -I {} dirname {} | sed 's|./apps/||' | sort | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "apps=$apps" >> $GITHUB_OUTPUT
          
          # Get packages list - use compact JSON output
          packages=$(find ./packages -maxdepth 2 -name "package.json" | grep -v node_modules | xargs -I {} dirname {} | sed 's|./packages/||' | sort | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "packages=$packages" >> $GITHUB_OUTPUT
          
          # Debug output
          echo "Found apps: $apps"
          echo "Found packages: $packages"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

  # Build packages that other packages depend on
  build-deps:
    name: Build Dependencies
    runs-on: ubuntu-latest
    needs: [setup]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build packages (dependencies only)
        run: pnpm --filter="@repo/*" --filter="@charisma/*" --filter="dexterity-sdk" --filter="blaze-sdk" --filter="clarity" build

  # Type checking in parallel
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [build-deps]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Type check all packages
        run: pnpm check-types

  # Linting for apps in parallel
  lint-apps:
    name: Lint Apps
    runs-on: ubuntu-latest
    needs: [setup, build-deps]
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.setup.outputs.apps) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Lint ${{ matrix.app }}
        run: |
          # Run lint from root to ensure workspace dependencies are available
          if [ -f "apps/${{ matrix.app }}/package.json" ] && jq -e '.scripts.lint' "apps/${{ matrix.app }}/package.json" > /dev/null; then
            pnpm --filter="${{ matrix.app }}" lint
          else
            echo "No lint script found for ${{ matrix.app }}, skipping..."
          fi

  # Linting for packages in parallel
  lint-packages:
    name: Lint Packages
    runs-on: ubuntu-latest
    needs: [setup, build-deps]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Lint ${{ matrix.package }}
        run: |
          # Run lint from root to ensure workspace dependencies are available
          if [ -f "packages/${{ matrix.package }}/package.json" ] && jq -e '.scripts.lint' "packages/${{ matrix.package }}/package.json" > /dev/null; then
            pnpm --filter="${{ matrix.package }}" lint
          else
            echo "No lint script found for ${{ matrix.package }}, skipping..."
          fi

  # Testing for apps in parallel
  test-apps:
    name: Test Apps
    runs-on: ubuntu-latest
    needs: [setup, build-deps]
    strategy:
      fail-fast: false
      matrix:
        app: ${{ fromJson(needs.setup.outputs.apps) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Test ${{ matrix.app }}
        run: |
          # Run test from root to ensure workspace dependencies are available
          if [ -f "apps/${{ matrix.app }}/package.json" ] && jq -e '.scripts.test' "apps/${{ matrix.app }}/package.json" > /dev/null; then
            pnpm --filter="${{ matrix.app }}" test
          else
            echo "No test script found for ${{ matrix.app }}, skipping..."
          fi

  # Testing for packages in parallel
  test-packages:
    name: Test Packages
    runs-on: ubuntu-latest
    needs: [setup, build-deps]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.setup.outputs.packages) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Test ${{ matrix.package }}
        run: |
          # Run test from root to ensure workspace dependencies are available
          if [ -f "packages/${{ matrix.package }}/package.json" ] && jq -e '.scripts.test' "packages/${{ matrix.package }}/package.json" > /dev/null; then
            pnpm --filter="${{ matrix.package }}" test
          else
            echo "No test script found for ${{ matrix.package }}, skipping..."
          fi

  # Coverage reporting
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [test-apps, test-packages]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Test with Coverage
        run: pnpm test:coverage
        continue-on-error: true

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: |
            **/coverage/lcov.info
            **/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      - name: Coverage Summary
        if: always()
        run: |
          echo "📊 Test Coverage Summary"
          echo "========================"
          find . -name "coverage-final.json" | head -5 | while read file; do
            if [ -f "$file" ]; then
              echo "Coverage report found: $file"
              if command -v jq >/dev/null 2>&1; then
                jq -r '.total | "Lines: \(.lines.pct)% | Functions: \(.functions.pct)% | Branches: \(.branches.pct)% | Statements: \(.statements.pct)%"' "$file" 2>/dev/null || echo "Could not parse coverage data"
              fi
            fi
          done
          echo "========================"

  # Build step to ensure everything compiles
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [typecheck, lint-apps, lint-packages]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8.15.6

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build all packages and apps
        run: pnpm build
        env:
          KV_URL: ${{ secrets.KV_URL }}
          KV_REST_API_URL: ${{ secrets.KV_REST_API_URL }}
          KV_REST_API_TOKEN: ${{ secrets.KV_REST_API_TOKEN }}
          KV_REST_API_READ_ONLY_TOKEN: ${{ secrets.KV_REST_API_READ_ONLY_TOKEN }}
          HIRO_API_KEY: ${{ secrets.HIRO_API_KEY }}
          NEXT_PUBLIC_TOKEN_CACHE_URL: ${{ secrets.NEXT_PUBLIC_TOKEN_CACHE_URL }}

  # Summary job that depends on all others
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [typecheck, lint-apps, lint-packages, test-apps, test-packages, coverage, build]
    if: always()
    steps:
      - name: Check job results
        run: |
          echo "Type check: ${{ needs.typecheck.result }}"
          echo "Lint apps: ${{ needs.lint-apps.result }}"
          echo "Lint packages: ${{ needs.lint-packages.result }}"
          echo "Test apps: ${{ needs.test-apps.result }}"
          echo "Test packages: ${{ needs.test-packages.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Build: ${{ needs.build.result }}"
          
          # Fail if essential checks failed
          if [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.lint-apps.result }}" != "success" ]] || \
             [[ "${{ needs.lint-packages.result }}" != "success" ]] || \
             [[ "${{ needs.test-apps.result }}" != "success" ]] || \
             [[ "${{ needs.test-packages.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Essential checks failed"
            exit 1
          fi
          echo "✅ All essential checks passed!"