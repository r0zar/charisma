name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  # Single setup and dependency build job
  setup-and-build:
    name: Setup & Build Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Build dependencies
        run: pnpm --filter="@repo/*" --filter="@charisma/*" --filter="dexterity-sdk" --filter="blaze-sdk" --filter="clarity" build

      - name: Cache built packages
        uses: actions/cache/save@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: built-packages-${{ github.sha }}

  # Quality checks in parallel - Turbo handles internal parallelization
  lint:
    name: Lint All Packages
    runs-on: ubuntu-latest
    needs: [setup-and-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Restore built packages
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: built-packages-${{ github.sha }}

      - name: Lint all packages
        run: pnpm lint

  test:
    name: Test All Packages
    runs-on: ubuntu-latest
    needs: [setup-and-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Restore built packages
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: built-packages-${{ github.sha }}

      - name: Test all packages
        run: pnpm test

  typecheck:
    name: Type Check All Packages
    runs-on: ubuntu-latest
    needs: [setup-and-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Restore built packages
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: built-packages-${{ github.sha }}

      - name: Type check all packages
        run: pnpm check-types

  # Coverage reporting (runs after tests complete)
  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'failure')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Restore built packages
        uses: actions/cache/restore@v4
        with:
          path: |
            packages/*/dist
            packages/*/build
          key: built-packages-${{ github.sha }}

      - name: Generate coverage
        run: pnpm test:coverage
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: |
            **/coverage/lcov.info
            **/coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Coverage Summary
        if: always()
        run: |
          echo "üìä Test Coverage Summary"
          echo "========================"
          find . -name "coverage-final.json" | head -5 | while read file; do
            if [ -f "$file" ]; then
              echo "Coverage report found: $file"
              if command -v jq >/dev/null 2>&1; then
                jq -r '.total | "Lines: \(.lines.pct)% | Functions: \(.functions.pct)% | Branches: \(.branches.pct)% | Statements: \(.statements.pct)%"' "$file" 2>/dev/null || echo "Could not parse coverage data"
              fi
            fi
          done
          echo "========================"

  # Full build after quality checks pass
  build:
    name: Build All Packages
    runs-on: ubuntu-latest
    needs: [lint, test, typecheck]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup project
        uses: ./.github/actions/setup

      - name: Build all packages and apps
        run: pnpm build
        env:
          KV_URL: ${{ secrets.KV_URL }}
          KV_REST_API_URL: ${{ secrets.KV_REST_API_URL }}
          KV_REST_API_TOKEN: ${{ secrets.KV_REST_API_TOKEN }}
          KV_REST_API_READ_ONLY_TOKEN: ${{ secrets.KV_REST_API_READ_ONLY_TOKEN }}
          HIRO_API_KEY: ${{ secrets.HIRO_API_KEY }}
          NEXT_PUBLIC_TOKEN_CACHE_URL: ${{ secrets.NEXT_PUBLIC_TOKEN_CACHE_URL }}

  # Summary job
  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [lint, test, typecheck, build]
    if: always()
    steps:
      - name: Check results
        run: |
          echo "üîç CI Results Summary"
          echo "===================="
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Type Check: ${{ needs.typecheck.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "===================="
          
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå CI Failed - One or more checks failed"
            exit 1
          fi
          
          echo "‚úÖ CI Passed - All checks successful!"